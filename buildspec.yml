version: 0.2
phases:
  install:
    commands:

  pre_build:
    commands:
      # Docker Image Tag Code Buiild Resolved Source Version
      - TAG="$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 6)"
      # Update variables in our Kubernetes Deployment Manifest
      - echo "Update variables in devops folder..."
      - sed -i -e "s|NAMESPACE_VALUE|$NAMESPACE|g"
        -e "s|DATABASE_EP|$DATABASE_EP|g"
        -e "s|SQS_SA_VALUE|$SQS_SA|g"
        -e "s|SQS_ROLE_VALUE|$SQS_ROLE|g"
        -e "s|CONTAINER_IMAGE|$REPOSITORY_URI:$TAG|g"
        -e "s|AWS_REGION_VALUE|$AWS_REGION|g"
        -e "s|QUEUE_URL_VALUE|$QUEUE_URL|g"
        -e "s|PSQL_USER_VALUE|$PSQL_USER|g"
        -e "s|PSQL_PASSWORD_VALUE|$PSQL_PASSWORD|g"
        -e "s|PSQL_HOST_VALUE|$PSQL_HOST|g"
        -e "s|PSQL_PORT_VALUE|$PSQL_PORT|g"
        -e "s|PSQL_DATABASE_VALUE|$PSQL_DATABASE|g" devops/deployment.yaml
      # Verify AWS CLI Version
      - echo "Verify AWS CLI Version..."
      - aws --version
      # Login to ECR Registry for docker to push the image to ECR Repository
      - echo "Login in to Amazon ECR..."
      - $(aws ecr get-login --no-include-email)
      # Update Kube config Home Directory
      - export KUBECONFIG=$HOME/.kube/config

  build:
    commands:
      # Build Docker Image
      - echo "Build started on `date`"
      - echo "Building the Docker image..."
      - docker build --tag $REPOSITORY_URI:$TAG .

  post_build:
    commands:
      # Push Docker Image to ECR Repository
      - echo "Build completed on `date`"
      - echo "Pushing the Docker image to ECR Repository"
      - docker push $REPOSITORY_URI:$TAG
      - echo "Docker Image Push to ECR Completed -  $REPOSITORY_URI:$TAG"

      # Extracting AWS Credential Information using STS Assume Role for kubectl
      - echo "Setting Environment Variables related to AWS CLI for Kube Config Setup"
      - CREDENTIALS=$(aws sts assume-role --role-arn $EKS_KUBECTL_ROLE_ARN --role-session-name codebuild-kubectl --duration-seconds 900)
      - export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
      - export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
      - export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
      - export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration')
      # Setup kubectl with our EKS Cluster
      - echo "Update Kube Config"
      - aws eks update-kubeconfig --name $EKS_CLUSTER_NAME
      # Apply changes to our Application using kubectl
      - kubectl apply -f devops/
      # Create Artifacts which we can use if we want to continue our pipeline for other stages
      - printf '[{"name":"deployment.yaml","imageUri":"%s"}]' $REPOSITORY_URI:$TAG > build.json

cache:
  paths:
    - /docker_cache

artifacts:
  files:
    - build.json
    - devops/*
